var GIST_CONTENT = "http://gozala.github.com/github/resources/github.gist.content.xml";
var GIST_META = "http://gozala.github.com/github/resources/github.gist.list.xml"
var YQL_URL = "https://query.yahooapis.com/v1/public/yql";

var TABLE_META = "github.gist.list",
    TABLE_CONTENT = "github.gist.content",
    LOGIN = "user = '%@' AND token = '%@'",
    USER = "user = '%@'",
    SQL = "USE '%@' AS %@;\n%@",
    FILTER_EQ = "\nAND %@ = '%@'",
    FILTER_NOT_EQ = "\nAND %@ != '%@'",
    FILTER_LIKE = "\nAND %@ LIKE '%@'"
    LIST = "SELECT * FROM %@ WHERE %@ %@",
    FILTERED_LIST = "SELECT * FROM %@ WHERE repo IN (SELECT repo FROM %@ WHERE %@ %@) AND %@3",
    READ = "SELECT content FROM %@ WHERE user = '%@' AND token = '%@' AND repo = '%@'",
    REMOVE = "DELETE FROM %@ WHERE user = '%@' AND token = '%@' AND repo = '%@'",
    WRITE = "INSERT INTO %@ (user, token, name, description, content, _public) VALUES ('%@', '%@', '%@', '%@', '%@', '%@')",
    UPDATE = "UPDATE %@ SET name = '%@', content = '%@', description = '%@' WHERE user = '%@' AND token = '%@' AND repo = '%@'";

var SEPARATOR = "Ëš";
/**
    Get's a list of published gists by a specified user. Is success callback
    is false will perform sync XHR. If [Githunb API token] (https://github.com/account#API_Token)
    is not passed only public gists will be listed.
    @param {Object} options
    @param {String} options.user        Githunb username (Case sensitive)
    @param {String} options.token       Githunb API token (optional)
    @param {Object} options.filter      (optional) Hash od (key -> value) filters
    to be applied on server. if value contains `%` like will be used.
    @param {Function} success           success callback (optional)
    @param {Function} error             error callback (optional)
*/
var list = exports.list = function list(options, success, error) {
    var result = [];
    var login = options.token ? _(LOGIN, options.user, options.token) : _(USER, options.user);
    var sqlFilter = "", filter = options.filter;
    for (var key in filter) {
        var value = filter[key];
        sqlFilter += ((0 > value.indexOf("%")) ? _(FILTER_EQ, key, esc(value)) : _(FILTER_LIKE, key, esc(value)));
    }

    request({
        url: YQL_URL,
        method: "POST",
        data: {
            format: "json",
            callback: "",
            q: _(SQL, GIST_META, TABLE_META, _(LIST, TABLE_META, login, sqlFilter))
        },
        success: function requestSuccess(response) {
            try {
                var responseResult = JSON.parse(response.text).query.results;
                if (responseResult) {
                    var gists = responseResult.gists;
                    if (typeof gists.push == "function") {
                        result.push.apply(result, responseResult.gists);
                    } else if (gists) {
                        result.push(gists);
                    }
                }
                if (success) success(result);
            } catch(e) {
                result.error = errorInfo(response.text, e);
                if (error) error(result);
            }
        },
        error: function requestError(response) {
            result.error = errorInfo(response.responseText);
            if (error) error(result);
        }
    });
    return result;
};
/**
    Get's a list of published gists by a specified user. Is success callback
    is false will perform sync XHR. If [Githunb API token] (https://github.com/account#API_Token)
    is not passed only public gists will be listed.
    @param {Object} options
    @param {String} options.user        Githunb username (Case sensitive)
    @param {String} options.token       Githunb API token (optionan)
    @param {Object} options.filter      Hash od (key -> value) filters
    to be applied on server. if value contains `%` like will be used.
    @param {Function} success           success callback (optional)
    @param {Function} error             error callback (optional)
*/
var listContents = exports.listContents = function(options, success, error) {
    var login = options.token ? _(LOGIN, options.user, options.token) : _(USER, options.user);
    var sqlFilter = "", filter = options.filter;
    for (var key in filter) {
        var value = filter[key];
        sqlFilter += ((0 > value.indexOf("%")) ? _(FILTER_EQ, key, esc(value)) : _(FILTER_LIKE, key, esc(value)));
    }
    var SQL_JOIN = _(FILTERED_LIST, TABLE_CONTENT, TABLE_META, login, sqlFilter)
    var QUERY = _(SQL, GIST_META, TABLE_META, _(SQL, GIST_CONTENT, TABLE_CONTENT, SQL_JOIN));
    var result = [];
    request({
        url: YQL_URL,
        method: "POST",
        data: {
            format: "json",
            callback: "",
            q: QUERY
        },
        success: function requestSuccess(response) {
            try {
                var responseResult = JSON.parse(response.text).query.results;
                if (responseResult) {
                    var gists = responseResult.gists;
                    if (typeof gists.push == "function") {
                        result.push.apply(result, responseResult.gists);
                    } else if (gists) {
                        result.push(gists);
                    }
                }
                if (success) success(result);
            } catch(e) {
                result.error = errorInfo(response.text, e);
                if (error) error(result);
            }
        },
        error: function requestError(response) {
            result.error = errorInfo(response.responseText);
            if (error) error(result);
        }
    });
    return result;
};
/**
    Removes Gist from the github server.
    @param {String} options      has to have properties user, token
    @param {Object} options
    @param {String} options.user        Githunb username (Case sensitive)
    @param {String} options.token       Githunb API token (optional)
    @param {String} options.repo        Unique gist id (Gist git repo)
    @param {Function} success           success callback (optional)
    @param {Function} error             error callback (optional)
*/
var remove = exports.remove = function remove(options, success, error) {
    var result = {};
    var query = _(SQL, GIST_CONTENT, TABLE_CONTENT, _(REMOVE, TABLE_CONTENT, options.user, options.token, options.repo));
    request({
        url: YQL_URL,
        data: {
            format: "json",
            callback: "",
            q: query,
        },
        success: function requestSuccess(response) {
            result.removed = true;
            if (success) success(result);
        },
        error: function requestError(response) {
            result.removed = false;
            result.error = errorInfo(response.responseText);
            if (error) error(result);
        }
    });
    return result;
};
/**
    Publishes `files` passed as a hashmap (`filename -> content`) to the Github
    gist service. Successfuly published gist returns repo id. If optional `repo`
    property is found in passed options write will perform update of the `repo`
    It's **important** o keep in mind that in case of update all the files and
    contents should be passed even if they don't change cause otherwie they will
    be delited since it's write method on repo and not on a files. In case of
    update public options is ignored.
    @param {JSON} files                 hashmap of file name -> content
    @param {JSON} options
    @param {String} options.user        Githunb username (Case sensitive)
    @param {String} options.token       Githunb API token (optional)
    @param {String} options.public      If passed and is true Gist will be public
    @param {String} options.repo        Unique gist id (Gist git repo)
    @param {Function} success           success callback (optional)
    @param {Function} error             error callback (optional)

 */
var write = exports.write = function write(files, options, success, error) {
    var result = {};
    var names = [], contents = [];
    for (var name in files) {
        names.push(name);
        contents.push(esc(files[name]))
    }
    var query = ((options.repo) ? // update
            _(UPDATE, TABLE_CONTENT, names.join(SEPARATOR), contents.join(SEPARATOR),
                esc(options.description), options.user, options.token, options.repo)
        : // insert
            _(WRITE, TABLE_CONTENT, options.user, options.token, names.join(SEPARATOR),
                esc(options.description), contents.join(SEPARATOR), options["public"])
    );
    request({
        url: YQL_URL,
        method: "POST",
        data: {
            format: "json",
            q: _(SQL, GIST_CONTENT, TABLE_CONTENT, query),
            callback: ""
        },
        success: function requestSuccess(response) {
            try {
                result.repo = JSON.parse(response.text).query.results.repo;
                if (success) success(result);
            } catch(e) {
                result.error = errorInfo(response.text, e);
                if (error) error(result);
            }

        },
        error: function requestError(response) {
            result.removed = false;
            result.error = errorInfo(response.responseText);
            if (error) error(result);
        }
    });
    return result;
};

/**
    Reads `files` from a gist repo. It's **important** to keep in mind that
    this function performs read on the repo and not on a file, so in scenario
    with multiple files in gist string returned will contain content of all
    file without any kind of separators.
    @param {JSON} options
    @param {String} options.user        Githunb username (Case sensitive)
    @param {String} options.token       Githunb API token (optional)
    @param {String} options.repo        Unique gist id (Gist git repo)
    @param {Function} success           success callback (optional)
    @param {Function} error             error callback (optional)

 */
var read = exports.read = function read(options, success, error) {
    var result = {};
    request({
        url: YQL_URL,
        method: "POST",
        data: {
            format: "json",
            callback: "",
            q: _(SQL, GIST_CONTENT, TABLE_CONTENT, _(READ, TABLE_CONTENT, options.user, options.token, options.repo))
        },
        success: function requestSuccess(response) {
            try {
                result.content = JSON.parse(response.text).query.results.gists.content;
                if (success) success(result);
            } catch(e) {
                result.error = errorInfo(response.text, e);
                if (error) error(result);
            }
        },
        error: function requestError(response) {
            result.error = errorInfo(response.responseText);
            if (error) error(result);
        }
    });
    return result;
}

function encode(data) {
    var message = "";
    for (var key in data) {
        message += "&" + encodeURIComponent(key) + "=" + encodeURIComponent(data[key]);
    }
    return message.substring(1);
}
function request(options) {
    var result = {};
    var xhr = new XMLHttpRequest();
    var url = options.url;
    var data = options.data;
    var message = null;
    if (data) message = encode(data);
    var method = null;
    var headers = options.headers || {};
    if ("POST" == (method = options.method)) {
        if (!headers["Content-type"]) headers["Content-type"] = "application/x-www-form-urlencoded";
    } else {
        method = "GET";
        url += "?" + message;
        message = null;
    }
    var success = options.success;
    var error = options.error;
    xhr.open(method, url, !!(success));
    if (headers) for (var key in headers) xhr.setRequestHeader(key, headers[key]);
    xhr.onreadystatechange = function xhrState() {
        if (xhr.readyState == 4) {
            if (xhr.status == 0 || xhr.status == 200) {
                var text = result.text = xhr.responseText;
                result.xml = xhr.responseXML;
                if(success) success(result);
            } else if (error) {
                error(xhr)
            }
        }
    }
    xhr.send(message);
    return result;
};

function _(string) {
    var params = Array.prototype.slice.call(arguments, 1),
        id = 0; // the current index for non-numerical replacements
    return string.replace(/%@([0-9]+)?/g, function(param, index) {
        param = params[((index) ? parseInt(index, 0) - 1 : id ++)];
        return ((param === null) ? '(null)' : ( param === undefined) ? '' : param).toString();
    });
}

<<<<<<< HEAD
=======
function errorInfo(data, error) {
    try {
        error = JSON.parse(error).error;
        return (undefined !== error.description) ? error.description : error;
    } catch(e) {
        if (data === "" && error instanceof Error) return error.message;
        return data;
    }
}

>>>>>>> bespin
function esc(text) { return text ? text.replace(/\\/g, "\\\\").replace(/\'/g, "\\'") : text; }